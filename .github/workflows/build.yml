name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-backend:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            rust-target: x86_64-unknown-linux-gnu
          # Linux ARM64
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            rust-target: aarch64-unknown-linux-gnu
          # macOS Intel
          - platform: macos-latest
            target: x86_64-apple-darwin
            rust-target: x86_64-apple-darwin
          # macOS Apple Silicon
          - platform: macos-latest
            target: aarch64-apple-darwin
            rust-target: aarch64-apple-darwin
          # Windows x86_64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            rust-target: x86_64-pc-windows-msvc
          # Windows ARM64
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            rust-target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./backend/rust-backend -> target"
          key: ${{ matrix.target }}

      - name: Prepare Git
        run: |
          mkdir -p build

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Prepare Backend
        run: |
          cd backend
          bun install
          cd rust-backend
          cargo fetch --target ${{ matrix.rust-target }}

      - name: Build Frontend
        run: |
          cd frontend
          bun install
          bun run build

      - name: Build Backend (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cd backend/rust-backend
          cargo build --release --target ${{ matrix.rust-target }}
          cp target/${{ matrix.rust-target }}/release/open-webui-rust ../../build/open-webui-lite-${{ matrix.target }}

      - name: Build Backend (Windows)
        if: runner.os == 'Windows'
        run: |
          cd backend/rust-backend
          cargo build --release --target ${{ matrix.rust-target }}
          copy target/${{ matrix.rust-target }}/release/open-webui-rust.exe ../../build/open-webui-lite-${{ matrix.target }}.exe

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.target }}
          path: build/open-webui-lite-*
          if-no-files-found: error

  build-desktop:
    needs: build-backend
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            rust-target: x86_64-unknown-linux-gnu
          # Linux ARM64
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            rust-target: aarch64-unknown-linux-gnu
          # macOS Intel
          - platform: macos-latest
            target: x86_64-apple-darwin
            rust-target: x86_64-apple-darwin
          # macOS Apple Silicon
          - platform: macos-latest
            target: aarch64-apple-darwin
            rust-target: aarch64-apple-darwin
          # Windows x86_64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            rust-target: x86_64-pc-windows-msvc
          # Windows ARM64
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            rust-target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu x86_64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies (Ubuntu ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            './backend/rust-backend -> target'
            './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Prepare Git
        run: |
          mkdir -p build

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-${{ matrix.target }}
          path: build/

      - name: Make Backend Executable (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x build/open-webui-lite-${{ matrix.target }}
          # Rename to match tauri.conf.json externalBin
          cp build/open-webui-lite-${{ matrix.target }} build/open-webui-lite

      - name: Copy Backend Executable (Windows)
        if: runner.os == 'Windows'
        run: |
          copy build\open-webui-lite-${{ matrix.target }}.exe build\open-webui-lite.exe

      - name: Prepare Desktop
        run: |
          cd src-tauri
          cargo fetch --target ${{ matrix.rust-target }}

      - name: Build Desktop (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_SYSROOT_DIR: /usr/aarch64-linux-gnu
        run: |
          cargo tauri build --target ${{ matrix.rust-target }}

      - name: Build Desktop (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo tauri build --target ${{ matrix.rust-target }}

      - name: Upload Desktop Artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/rpm/*.rpm
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/appimage/*.AppImage
          if-no-files-found: error

      - name: Upload Desktop Artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/macos/*.app
          if-no-files-found: error

      - name: Upload Desktop Artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/nsis/*.exe
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi
          if-no-files-found: error

  release:
    needs: [build-backend, build-desktop]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Determine release type and tag
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "tag_name=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create/Update Dev Release
        if: steps.release_info.outputs.is_release == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: Development Build (${{ steps.release_info.outputs.tag_name }})
          body: |
            üöÄ Automated development build from commit ${{ github.sha }}

            **‚ö†Ô∏è This is a pre-release development build and may be unstable.**

            ### Changes
            - Latest changes from main branch

            ### Build Information
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Build Date: ${{ github.event.head_commit.timestamp }}
          files: |
            artifacts/backend-*/*
            artifacts/desktop-*/*
          prerelease: true
          draft: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.release_info.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: Release ${{ steps.release_info.outputs.tag_name }}
          body: |
            üéâ Release ${{ steps.release_info.outputs.tag_name }}

            ### Download

            #### Backend Server
            - Linux x86_64: `open-webui-lite-x86_64-unknown-linux-gnu`
            - Linux ARM64: `open-webui-lite-aarch64-unknown-linux-gnu`
            - macOS Intel: `open-webui-lite-x86_64-apple-darwin`
            - macOS Apple Silicon: `open-webui-lite-aarch64-apple-darwin`
            - Windows x86_64: `open-webui-lite-x86_64-pc-windows-msvc.exe`
            - Windows ARM64: `open-webui-lite-aarch64-pc-windows-msvc.exe`

            #### Desktop Application
            - Linux x86_64: `.deb`, `.rpm`, `.AppImage`
            - Linux ARM64: `.deb`, `.rpm`, `.AppImage`
            - macOS Intel: `.dmg`, `.app`
            - macOS Apple Silicon: `.dmg`, `.app`
            - Windows x86_64: `.exe` (NSIS installer), `.msi`
            - Windows ARM64: `.exe` (NSIS installer), `.msi`

            ### Installation

            **Backend Server:**
            ```bash
            # Linux/macOS
            chmod +x open-webui-lite-*
            ./open-webui-lite-*

            # Windows
            open-webui-lite-*.exe
            ```

            **Desktop Application:**
            - Install the appropriate package for your platform

            ### What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          files: |
            artifacts/backend-*/*
            artifacts/desktop-*/*
          prerelease: false
          draft: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
