name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build rust frontend once and cache it
  build-rust-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Build Frontend
        run: |
          cd backend
          bun install
          bun run build

      - uses: actions/upload-artifact@v4
        with:
          name: rust-frontend-build
          path: backend/build/
          retention-days: 1

  # Build backend and desktop in one job
  build:
    needs: build-rust-frontend
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - platform: macos-latest
            target: x86_64-apple-darwin
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            './backend/rust-backend -> target'
            './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: rust-frontend-build
          path: backend/build/

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # For ARM64 cross-compilation, configure multi-arch first
            sudo dpkg --add-architecture arm64
            sudo sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
            sudo sed -i 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install -y libssl-dev:arm64 libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf
          else
            sudo apt-get update
            sudo apt-get install -y libssl-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          fi

      - name: Build Backend (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/include' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
        run: |
          mkdir -p build
          cd backend/rust-backend
          cargo fetch --target ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/open-webui-rust ../../build/open-webui-lite-${{ matrix.target }}

      - name: Build Backend (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd backend/rust-backend
          cargo build --release --target ${{ matrix.target }}
          copy target/${{ matrix.target }}/release/open-webui-rust.exe ..\..\build\open-webui-lite-${{ matrix.target }}.exe

      - name: Build Desktop (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu' || '' }}
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/include' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
        run: |
          cd src-tauri
          cargo fetch --target ${{ matrix.target }}
          cd ..
          cargo tauri build --target ${{ matrix.target }}

      - name: Build Desktop (Windows)
        if: runner.os == 'Windows'
        run: |
          cd src-tauri
          cargo fetch --target ${{ matrix.target }}
          cd ..
          cargo tauri build --target ${{ matrix.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: |
            build/open-webui-lite-${{ matrix.target }}*
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-*

      - name: Determine Release Type
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "tag_name=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.is_release == 'true' && format('Release {0}', steps.release_info.outputs.tag_name) || format('Development Build ({0})', steps.release_info.outputs.tag_name) }}
          body: |
            ${{ steps.release_info.outputs.is_release == 'true' && 'üéâ' || 'üöÄ' }} ${{ steps.release_info.outputs.is_release == 'true' && format('Release {0}', steps.release_info.outputs.tag_name) || format('Automated development build from commit {0}', github.sha) }}

            ${{ steps.release_info.outputs.is_release == 'false' && '**‚ö†Ô∏è This is a pre-release development build and may be unstable.**' || '' }}

            ### Backend Server
            - Linux x86_64: `open-webui-lite-x86_64-unknown-linux-gnu`
            - Linux ARM64: `open-webui-lite-aarch64-unknown-linux-gnu`
            - macOS Intel: `open-webui-lite-x86_64-apple-darwin`
            - macOS Apple Silicon: `open-webui-lite-aarch64-apple-darwin`
            - Windows x86_64: `open-webui-lite-x86_64-pc-windows-msvc.exe`
            - Windows ARM64: `open-webui-lite-aarch64-pc-windows-msvc.exe`

            ### Desktop Application
            - Linux: `.deb`, `.rpm`
            - macOS: `.dmg`, `.app`
            - Windows: `.exe`, `.msi`
          files: artifacts/build-*/**/*
          prerelease: ${{ steps.release_info.outputs.prerelease }}
          draft: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
