name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build rust frontend once and cache it
  build-rust-frontend:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-frontend.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate Frontend Cache Key
        id: frontend-hash
        run: |
          HASH=$(find backend/src backend/static backend/package.json backend/bun.lock backend/vite.config.ts backend/svelte.config.js backend/tailwind.config.js -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache Frontend Build
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: backend/build/
          key: frontend-build-${{ steps.frontend-hash.outputs.hash }}
          restore-keys: |
            frontend-build-

      - uses: oven-sh/setup-bun@v1
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        with:
          bun-version: latest

      - name: Build Frontend
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd backend
          bun install
          bun run build

      - uses: actions/upload-artifact@v4
        with:
          name: rust-frontend-build
          path: backend/build/
          retention-days: 1

  # Build backend and desktop in one job
  build:
    needs: build-rust-frontend
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - platform: macos-latest
            target: x86_64-apple-darwin
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            './backend/rust-backend -> target'
            './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0" --locked

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: rust-frontend-build
          path: backend/build/

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # For ARM64 cross-compilation, configure multi-arch first
            sudo dpkg --add-architecture arm64
            sudo sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
            sudo sed -i 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install -y libssl-dev:arm64 libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf
          else
            sudo apt-get update
            sudo apt-get install -y libssl-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          fi

      - name: Build Backend (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu' && '/usr/lib/x86_64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ (matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu') && '/usr/include' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu' && '/usr/lib/x86_64-linux-gnu' || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
        run: |
          mkdir -p build
          cd backend/rust-backend
          cargo fetch --target ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/open-webui-rust ../../build/open-webui-lite-${{ matrix.target }}

      - name: Build Backend (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd backend/rust-backend
          cargo build --release --target ${{ matrix.target }}
          copy target/${{ matrix.target }}/release/open-webui-rust.exe ..\..\build\open-webui-lite-${{ matrix.target }}.exe

      - name: Build Desktop (Unix)
        if: runner.os != 'Windows'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu' || '' }}
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu' && '/usr/lib/x86_64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ (matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu') && '/usr/include' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu' && '/usr/lib/x86_64-linux-gnu' || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
        run: |
          cd src-tauri
          cargo fetch --target ${{ matrix.target }}
          cd ..
          cargo tauri build --target ${{ matrix.target }}

      - name: Build Desktop (Windows)
        if: runner.os == 'Windows'
        run: |
          cd src-tauri
          cargo fetch --target ${{ matrix.target }}
          cd ..
          cargo tauri build --target ${{ matrix.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: |
            build/open-webui-lite-${{ matrix.target }}*
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-*

      - name: Organize Release Assets
        run: |
          mkdir -p release-assets

          # Copy backend binaries (executable files only, not desktop bundles)
          find artifacts/build-x86_64-unknown-linux-gnu -name "open-webui-lite-x86_64-unknown-linux-gnu" -type f -exec cp {} release-assets/ \;
          find artifacts/build-aarch64-unknown-linux-gnu -name "open-webui-lite-aarch64-unknown-linux-gnu" -type f -exec cp {} release-assets/ \;
          find artifacts/build-x86_64-apple-darwin -name "open-webui-lite-x86_64-apple-darwin" -type f -exec cp {} release-assets/ \;
          find artifacts/build-aarch64-apple-darwin -name "open-webui-lite-aarch64-apple-darwin" -type f -exec cp {} release-assets/ \;
          find artifacts/build-x86_64-pc-windows-msvc -name "open-webui-lite-x86_64-pc-windows-msvc.exe" -type f -exec cp {} release-assets/ \;
          find artifacts/build-aarch64-pc-windows-msvc -name "open-webui-lite-aarch64-pc-windows-msvc.exe" -type f -exec cp {} release-assets/ \;

          # Copy desktop app packages (only the final installer packages)
          find artifacts -name "*.deb" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.rpm" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.dmg" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.msi" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*-setup.exe" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.app.tar.gz" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.AppImage" -type f -exec cp {} release-assets/ \;

          ls -lh release-assets/

      - name: Determine Release Type
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "tag_name=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Body
        id: generate_body
        run: |
          TAG="${{ steps.release_info.outputs.tag_name }}"
          REPO="${{ github.repository }}"
          IS_RELEASE="${{ steps.release_info.outputs.is_release }}"

          # Generate title
          if [ "$IS_RELEASE" == "true" ]; then
            TITLE="🎉 Release ${TAG}"
            WARNING=""
          else
            TITLE="🚀 Automated development build from commit ${{ github.sha }}"
            WARNING="**⚠️ This is a pre-release development build and may be unstable.**"
          fi

          # Generate body content
          cat > release_body.md << EOF
          ${TITLE}

          ${WARNING}

          ## 📦 Desktop Application Installers

          ### 🪟 Windows
          [![Windows x64](https://img.shields.io/badge/Windows-x64-0078D6?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_x64-setup.exe)
          [![Windows ARM64](https://img.shields.io/badge/Windows-ARM64-0078D6?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_arm64-setup.exe)

          - **Installer (x64)**: \`open-webui-lite-desktop_0.1.0_x64-setup.exe\` | **MSI**: \`open-webui-lite-desktop_0.1.0_x64_en-US.msi\`
          - **Installer (ARM64)**: \`open-webui-lite-desktop_0.1.0_arm64-setup.exe\` | **MSI**: \`open-webui-lite-desktop_0.1.0_arm64_en-US.msi\`

          ### 🍎 macOS
          [![macOS Intel](https://img.shields.io/badge/macOS-Intel-000000?style=for-the-badge&logo=apple&logoColor=white)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_x64.dmg)
          [![macOS Apple Silicon](https://img.shields.io/badge/macOS-Apple_Silicon-000000?style=for-the-badge&logo=apple&logoColor=white)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_aarch64.dmg)

          - **Intel (x64)**: \`open-webui-lite-desktop_0.1.0_x64.dmg\`
          - **Apple Silicon (ARM64)**: \`open-webui-lite-desktop_0.1.0_aarch64.dmg\`

          ### 🐧 Linux
          [![Linux x64](https://img.shields.io/badge/Linux-x64-FCC624?style=for-the-badge&logo=linux&logoColor=black)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_amd64.deb)
          [![Linux ARM64](https://img.shields.io/badge/Linux-ARM64-FCC624?style=for-the-badge&logo=linux&logoColor=black)](https://github.com/${REPO}/releases/download/${TAG}/open-webui-lite-desktop_0.1.0_arm64.deb)

          - **Debian/Ubuntu (x64)**: \`open-webui-lite-desktop_0.1.0_amd64.deb\`
          - **Debian/Ubuntu (ARM64)**: \`open-webui-lite-desktop_0.1.0_arm64.deb\`
          - **RedHat/Fedora (x64)**: \`open-webui-lite-desktop-0.1.0-1.x86_64.rpm\`
          - **RedHat/Fedora (ARM64)**: \`open-webui-lite-desktop-0.1.0-1.aarch64.rpm\`

          ---

          ## 🖥️ Backend Server (CLI)

          ### Linux
          - **x86_64**: \`open-webui-lite-x86_64-unknown-linux-gnu\`
          - **ARM64**: \`open-webui-lite-aarch64-unknown-linux-gnu\`

          ### macOS
          - **Intel**: \`open-webui-lite-x86_64-apple-darwin\`
          - **Apple Silicon**: \`open-webui-lite-aarch64-apple-darwin\`

          ### Windows
          - **x86_64**: \`open-webui-lite-x86_64-pc-windows-msvc.exe\`
          - **ARM64**: \`open-webui-lite-aarch64-pc-windows-msvc.exe\`
          EOF

          # Set multiline output
          {
            echo "body<<EOFMARKER"
            cat release_body.md
            echo "EOFMARKER"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.is_release == 'true' && format('Release {0}', steps.release_info.outputs.tag_name) || format('Development Build ({0})', steps.release_info.outputs.tag_name) }}
          body: ${{ steps.generate_body.outputs.body }}
          files: release-assets/*
          prerelease: ${{ steps.release_info.outputs.prerelease }}
          draft: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
